# This is the main configuration file for the application.
# ~~~~~

# RWW Play Apps setup
# ===================
#
# RWW Play contains a number of apps, some of which are optional

http.hostname="joe.example"
https.port="8443" 
https.trustStore="noCA"
https.keyStore="joe.keystore.jks"
https.keyStorePassword="password"

# enable Subdomain support 
rww.subdomains="false"

# if one needs to be able to debug the SSL layer
# see http://stackoverflow.com/questions/21958615/restricting-java-based-web-server-tls-protocols-for-inspection-by-wireshark
# jdk.tls.disabledAlgorithms=DHE, ECDHE

# WebProxy: controllers.AuthProxyApp
# ~~~~~~~~
# The WebProxy allows you to proxy some web service behind https in order
# to demonstrate what WebID access conrol on that server would look like
# running this will currently take up the whole server space, and works
# well only with web servers that use relative URLs for their content


# TODO to remove? not used anymore?
# the web server to proxy ( W3C works well)
rww.proxy.for="http://www.w3.org/"



# Path of the root container that will contain the rdf and acl files
rww.root.container.path="test_www"



akka {
  loglevel = "DEBUG"
}


# use -Dsmtp.password=xxxx

smtp {
  host="smtp.gmail.com"
  user="yyyyyyyy@gmail.com"
  ssl=true
  from="Startup <support@your.co>"
  password="setme"
}



#####################################################################################
#####################################################################################
#####################################################################################

# Web Server Setup
# ================
# This is the usual Play setup file, except for the TrustManager stuff
# that only works with the TLS enhanced version of Play 2.0
# found at https://github.com/bblfish/Play20 - TLS branch

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="<qKD0^kC5jSvOiZk9Hv8qMsfG>[d=^X/a/CobwT9qcce`0OF`]dDs3]>M3@Maj8p"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
#logger.rww=DEBUG

# Trust Manager
# https.trustStore=test.WebIDTrustManager
